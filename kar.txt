<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Profile - Diet and Fitness Tracker</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/heroicons@2.0.18/dist/heroicons.min.css" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background-image: url('data:image/svg+xml,%3Csvg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"%3E%3Cg fill="%239C92AC" fill-opacity="0.1"%3E%3Cpath d="M0 0h1v1H0zM19 19h1v1h-1z"/%3E%3C/g%3E%3C/svg%3E');
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .animate-fade-in {
            animation: fadeIn 0.5s ease-out;
        }
        button {
            transition: all 0.3s ease;
        }
        button:hover {
            transform: scale(1.05);
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen flex items-center justify-center p-4 sm:p-6">
    <div class="container bg-white rounded-xl shadow-xl p-8 max-w-5xl w-full">
        <h1 class="text-4xl font-bold text-white bg-gradient-to-r from-teal-500 to-blue-600 py-4 px-6 rounded-lg mb-8 text-center">User Profile - Diet and Fitness Tracker</h1>

        <!-- User Profile Section -->
        <div class="mb-12 p-6 bg-gray-50 rounded-xl shadow-lg animate-fade-in">
            <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
                <svg class="w-6 h-6 mr-2 text-teal-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path></svg>
                User Profile
            </h2>
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <input type="text" id="username" placeholder="Username" class="p-3 border border-gray-200 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500 bg-white text-gray-700">
                <input type="number" id="age" placeholder="Age" class="p-3 border border-gray-200 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500 bg-white text-gray-700">
                <input type="number" id="height" placeholder="Height (cm)" class="p-3 border border-gray-200 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500 bg-white text-gray-700">
                <input type="number" id="weight" placeholder="Weight (kg)" class="p-3 border border-gray-200 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500 bg-white text-gray-700">
                <select id="gender" class="p-3 border border-gray-200 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500 bg-white text-gray-700">
                    <option value="" disabled selected>Select Gender</option>
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                </select>
                <input type="number" id="calorieGoal" placeholder="Daily Calorie Goal" class="p-3 border border-gray-200 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500 bg-white text-gray-700">
            </div>
            <div class="mt-6 flex space-x-4">
                <button onclick="saveProfile()" class="bg-gradient-to-r from-teal-500 to-blue-600 text-white px-6 py-3 rounded-md hover:bg-teal-600">Save Profile</button>
                <button onclick="clearAllData()" class="bg-red-500 text-white px-6 py-3 rounded-md hover:bg-red-600">Clear All Data</button>
            </div>
            <div id="profileError" class="text-red-400 text-sm mt-3"></div>
            <div id="profileDisplay" class="mt-6 text-gray-700 leading-relaxed"></div>
        </div>
    </div>

    <script>
        console.log("User Profile Module Initialized");

        class UserProfile {
            constructor() {
                this.profile = null;
                this.loadProfile();
            }

            validateProfile(username, age, height, weight, gender, calorieGoal) {
                let errors = [];
                if (!username || username.length < 3) {
                    errors.push("Username must be at least 3 characters.");
                }
                if (!age || age < 18 || age > 120) {
                    errors.push("Age must be between 18 and 120.");
                }
                if (!height || height < 100 || height > 250) {
                    errors.push("Height must be between 100 and 250 cm.");
                }
                if (!weight || weight < 30 || weight > 300) {
                    errors.push("Weight must be between 30 and 300 kg.");
                }
                if (!gender) {
                    errors.push("Gender is required.");
                }
                if (!calorieGoal || calorieGoal < 1000 || calorieGoal > 5000) {
                    errors.push("Calorie goal must be between 1000 and 5000.");
                }
                return errors;
            }

            calculateBMI(height, weight) {
                try {
                    const heightInMeters = height / 100;
                    const bmi = (weight / (heightInMeters * heightInMeters)).toFixed(2);
                    return isNaN(bmi) ? "N/A" : bmi;
                } catch (e) {
                    console.error("BMI calculation error:", e);
                    return "N/A";
                }
            }

            saveProfile(username, age, height, weight, gender, calorieGoal) {
                const errors = this.validateProfile(username, age, height, weight, gender, calorieGoal);
                if (errors.length > 0) {
                    document.getElementById("profileError").innerText = errors.join(" ");
                    return false;
                }
                try {
                    this.profile = {
                        username,
                        age: parseInt(age),
                        height: parseFloat(height),
                        weight: parseFloat(weight),
                        gender,
                        calorieGoal: parseInt(calorieGoal),
                        bmi: this.calculateBMI(height, weight)
                    };
                    localStorage.setItem("userProfile", JSON.stringify(this.profile));
                    this.displayProfile();
                    document.getElementById("profileError").innerText = "";
                    return true;
                } catch (e) {
                    console.error("Profile save error:", e);
                    document.getElementById("profileError").innerText = "Failed to save profile. Check browser settings.";
                    return false;
                }
            }

            loadProfile() {
                try {
                    const profileData = localStorage.getItem("userProfile");
                    if (profileData) {
                        this.profile = JSON.parse(profileData);
                        this.displayProfile();
                    }
                } catch (e) {
                    console.error("Profile load error:", e);
                    document.getElementById("profileError").innerText = "Failed to load profile. Clear browser data and try again.";
                }
            }

            displayProfile() {
                const displayDiv = document.getElementById("profileDisplay");
                if (this.profile) {
                    displayDiv.innerHTML = `
                        <p><strong>Username:</strong> ${this.profile.username}</p>
                        <p><strong>Age:</strong> ${this.profile.age}</p>
                        <p><strong>Height:</strong> ${this.profile.height} cm</p>
                        <p><strong>Weight:</strong> ${this.profile.weight} kg</p>
                        <p><strong>Gender:</strong> ${this.profile.gender}</p>
                        <p><strong>BMI:</strong> ${this.profile.bmi}</p>
                        <p><strong>Daily Calorie Goal:</strong> ${this.profile.calorieGoal}</p>
                    `;
                } else {
                    displayDiv.innerHTML = "<p>No profile data available.</p>";
                }
            }

            clearAllData() {
                try {
                    if (confirm("Are you sure you want to clear all data? This cannot be undone.")) {
                        localStorage.removeItem("userProfile");
                        this.profile = null;
                        this.displayProfile();
                        document.getElementById("profileError").innerText = "Profile data cleared.";
                    }
                } catch (e) {
                    console.error("Clear data error:", e);
                    document.getElementById("profileError").innerText = "Failed to clear data.";
                }
            }
        }

        const userProfile = new UserProfile();

        function saveProfile() {
            const username = document.getElementById("username").value.trim();
            const age = document.getElementById("age").value;
            const height = document.getElementById("height").value;
            const weight = document.getElementById("weight").value;
            const gender = document.getElementById("gender").value;
            const calorieGoal = document.getElementById("calorieGoal").value;
            userProfile.saveProfile(username, age, height, weight, gender, calorieGoal);
        }

        function clearAllData() {
            userProfile.clearAllData();
        }
    </script>
</body>
</html> Member 1 sagar doing user profile

